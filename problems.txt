successor ( p )
if right(p) != null
  return minimum(right(p))
p1 = parent(p)
While p1 != null AND p == right(p1)
	p = p1
	p1 = parent(p)
return  p1

/* C++ program to print level
	order traversal using STL */
#include <bits/stdc++.h>
using namespace std;

// A Binary Tree Node
struct Node {
	int data;
	struct Node *left, *right;
};

// Iterative method to find height of Binary Tree
void printLevelOrder(Node* root)
{
	// Base Case
	if (root == NULL)
		return;

	// Create an empty queue for level order traversal
	queue<Node*> q;

	// Enqueue Root and initialize height
	q.push(root);

	while (q.empty() == false) {
		// Print front of queue and remove it from queue
		Node* node = q.front();
		cout << node->data << " ";
		q.pop();

		/* Enqueue left child */
		if (node->left != NULL)
			q.push(node->left);

		/*Enqueue right child */
		if (node->right != NULL)
			q.push(node->right);
	}
}

// Utility function to create a new tree node
Node* newNode(int data)
{
	Node* temp = new Node;
	temp->data = data;
	temp->left = temp->right = NULL;
	return temp;
}

// Driver program to test above functions
int main()
{
	// Let us create binary tree shown in above diagram
	Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);

	cout << "Level Order traversal of binary tree is \n";
	printLevelOrder(root);
	return 0;
}

void add(fstream &file) { //adding family to the file
    int _familyId, _numOfFamilyMembers, _phoneNumber, writeOffset;
    char _familyName[21]{};
    cout << "enter the family's:  id, name, amount of people and a phone number: "<<endl;
    Family tmp;
    cin >> _familyId >> _familyName >> _numOfFamilyMembers >> _phoneNumber;//input info
    if (_familyId < 1 || 100 < _familyId)
        throw InvalidFamilyNum;   //throw "ERROR: Invalid family number"
//    file.seekg(0, ios::beg);// pointing read to start of file
    file.clear();
    while (!file.eof()) {//check if famId is not already in file
        file.read((char *) &tmp, sizeof(Family));//reading family from file
        if (tmp.getFamilyId() == _familyId) {
            throw familyInTheFile;   //throw "ERROR: Family is already in the file";
        }
    }
    // insert new family into file
    writeOffset = sizeof(Family) * (_familyId - 1);// prepare offset from beginning
    Family input{_familyId, _familyName, _numOfFamilyMembers, _phoneNumber, NONE};
    file.seekp(writeOffset);
    file.write((char *) &input, sizeof(Family));//writing into file in place
}